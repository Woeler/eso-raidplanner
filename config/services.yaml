# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    discord.bot.clientid: '%env(DISCORD_BOT_CLIENT_ID)%'
    router.request_context.host: 'esoraidplanner.com'
    router.request_context.scheme: 'https'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
          $defaultRoles: ['ROLE_USER']
          $patreonServer: '342583943838826497'
          $patreonRoles:
            1: '653216508478095360'
            2: '653248813347242000'
            3: '653281259694456882'
            4: '653281350228639765'
          $discordBotCommands: ['!events', '!event', '!attend', '!unattend', '!timezone', '!help', '!characters']

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    _instanceof:
      App\BotCommand\BotCommandInterface:
        tags: [ 'bot_command' ]
        lazy: true

    App\Controller\Api\DiscordBotController:
      class: App\Controller\Api\DiscordBotController
      arguments:
        $commands: !tagged 'bot_command'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Menu\MenuBuilder:
        tags:
            - name: 'knp_menu.menu_builder'
              method: 'mainDefault'
              alias: 'main-default'
            - name: 'knp_menu.menu_builder'
              method: 'mainProfile'
              alias: 'main-profile'
            - name: 'knp_menu.menu_builder'
              method: 'mainFooter'
              alias: 'main-footer'

    App\Service\DiscordBotService:
      class: App\Service\DiscordBotService
      public: true
      arguments:
        $botToken: '%env(DISCORD_BOT_TOKEN)%'
        $botId: '%env(DISCORD_BOT_CLIENT_ID)%'

    App\EventSubscriber\DiscordBotSubscriber:
      class: App\EventSubscriber\DiscordBotSubscriber
      public: true
      arguments:
        $token: '%env(BOT_AUTH_TOKEN)%'

    App\Service\DiscordOauthService:
      class: App\Service\DiscordOauthService
      public: true
      arguments:
        $clientId: '%env(OAUTH_DISCORD_CLIENT_ID)%'
        $clientSecret: '%env(OAUTH_DISCORD_CLIENT_SECRET)%'

    App\Security\DiscordAuthenticator:
      class: App\Security\DiscordAuthenticator
      arguments:
        $admins: '%env(json:ADMINS)%'

    App\Service\GuildLoggerService:
      class: App\Service\GuildLoggerService
      public: true
      arguments:
        $appUrl: '%env(APP_URL)%'

    App\Service\ReminderService:
      class: App\Service\ReminderService
      public: true
      arguments:
        $appUrl: '%env(APP_URL)%'

    GuzzleHttp\Client:
      class: GuzzleHttp\Client

    App\Client\DiscordClient:
      class: App\Client\DiscordClient
      arguments:
        $config:
          base_uri: 'https://discordapp.com/api/'

    App\Client\EsoHubClient:
      class: App\Client\EsoHubClient
      arguments:
        $config:
          base_uri: 'https://eso-hub.com/api/'
          headers:
            Authorization: 'Bearer %env(ESO_HUB_TOKEN)%'
            User-Agent: 'ESO Raidplanner'

    App\EventListener\CalendarListener:
      tags:
        - { name: 'kernel.event_listener', event: 'calendar.set_data', method: load }

    discord.bot.patreon:
      class: App\Service\DiscordBotService
      arguments:
        $botToken: '%env(DISCORD_PATREON_BOT_TOKEN)%'
        $botId: '%env(DISCORD_PATREON_BOT_CLIENT_ID)%'

    App\Command\PatreonSyncCommand:
      class: App\Command\PatreonSyncCommand
      arguments:
        $discordBotService: '@discord.bot.patreon'
